import { OpenStreetMapProvider } from 'leaflet-geosearch';
import * as Geocoding from 'esri-leaflet-geocoder';
const lat = document.querySelector('#lat').value || 37.7790262;
const lng = document.querySelector('#lng').value || -122.419906;

const map = L.map('map').setView([lat, lng], 15);
let markers = new L.FeatureGroup().addTo(map)
let marker;
document.addEventListener('DOMContentLoaded', () => {
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    // search location
    const search = document.querySelector('#seeker-form');
    search.addEventListener('input', searchLocation)
})

function searchLocation(e) {
    if(e.target.value.length > 8) {
        // Clear marker if it's already there
        markers.clearLayers();
        // Use provider and Geocoder
        const geocodeService = Geocoding.geocodeService();
        console.log(geocodeService);
        const provider = new OpenStreetMapProvider();
        provider.search({query: e.target.value}).then((result) => {
            geocodeService.reverse().latlng(result[0].bounds[0], 15).run(function(error, result) {
                console.log(result);

/*                 console.log(result[0].bounds[0]);
                // Show search map


                map.setView(result[0].bounds[0], 15)
                // Add pin */

                marker = new L.marker(result[0].bounds[0], {
                    draggable: true,
                    autoPan: true
                }).addTo(map).bindPopup(result[0].label).openPopup()
                // Assign to container markers
                markers.addLayer(marker)
                // Detect marker position
                marker.on('moveend', function(e){
                    marker = e.target;
                    const position = marker.getLatLng();
                    map.panTo(new L.LatLng(position.lat, position.lng))
                })
            })
        })
    }
}
/* const marker = L.marker([51.5, -0.09]).addTo(map); */



import { OpenStreetMapProvider } from 'leaflet-geosearch';
import * as Geocoding from 'esri-leaflet-geocoder';
import L from 'leaflet';
// obtener valores de la base de datos

const lat = document.querySelector('#lat').value ||  37.7790262;
const lng = document.querySelector('#lng').value ||  -122.419906;
const address = document.querySelector('#address').value || '';
const map = L.map('map').setView([lat, lng], 15);

let markers = new L.FeatureGroup().addTo(map);
let marker;

// Utilizar el provider y GeoCoder
const geocodeService = Geocoding.geocodeService();
// Colocar el Pin en Edición

if(lat && lng ){
    // agregar el pin
    marker = new L.marker([lat, lng], {
        draggable : true,
        autoPan: true
    })
    .addTo(map)
    .bindPopup(address)
    .openPopup();

    // asignar al contenedor markers
    markers.addLayer(marker);

    // detectar movimiento del marker
    marker.on('moveend', function(e) {
        marker = e.target;
        var position = marker.getLatLng();
        map.panTo(new L.LatLng(position.lat, position.lng) );

        // reverse geocoding, cuando el usuario reubica el pin
        geocodeService.reverse().latlng(position, 15 ).run(function(error, result) {

            fillInput(result);

            // asigna los valores al popup del marker
            marker.bindPopup(result.address.LongLabel);
        });
    })
}

document.addEventListener('DOMContentLoaded', () => {
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // buscar la dirección
    const seeker = document.querySelector('#seeker-form');
    seeker.addEventListener('input', searchLocation);
})

function searchLocation(e) {
    if(e.target.value.length > 8) {

        // si existe un pin anterior limpiarlo
        markers.clearLayers();


        const provider = new OpenStreetMapProvider();
        provider.search({ query: e.target.value }).then(( result ) => {

            geocodeService.reverse().latlng(result[0].bounds[0], 15 ).run(function(error, result) {
                console.log(result);
                fillInput(result);

                // console.log(result);
                // mostrar el mapa
                map.setView(result[0].bounds[0], 15);

                // agregar el pin
                marker = new L.marker(result[0].bounds[0], {
                    draggable : true,
                    autoPan: true
                })
                .addTo(map)
                .bindPopup(result[0].label)
                .openPopup();

                // asignar al contenedor markers
                markers.addLayer(marker);


                // detectar movimiento del marker
                marker.on('moveend', function(e) {
                    marker = e.target;
                    const position = marker.getLatLng();
                    map.panTo(new L.LatLng(position.lat, position.lng) );

                    // reverse geocoding, cuando el usuario reubica el pin
                    geocodeService.reverse().latlng(position, 15 ).run(function(error, result) {


                        fillInput(result);

                        // asigna los valores al popup del marker
                        marker.bindPopup(result.address.LongLabel);
                    });
                })
            })

        })
    }
}


function fillInput(result) {
    document.querySelector('#address').value = result.address.Address || '';
    document.querySelector('#city').value = result.address.City || '';
    document.querySelector('#state').value = result.address.Region || '';
    document.querySelector('#country').value = result.address.CountryCode || '';
    document.querySelector('#lat').value = result.latlng.lat || '';
    document.querySelector('#lng').value = result.latlng.lng || '';
}


const apikey = '560aff7b524349f59b636ef842c18d45';